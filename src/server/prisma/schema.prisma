generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model Organization {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Campaign    Campaign[]
  users       User[]
}

model UseClass {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  campaigns   Campaign[]
}

model Satellite {
  id          Int           @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  composition Composition[]
  image       Image[]
}

model Composition {
  id          Int        @id @default(autoincrement())
  colors      String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  satelliteId Int?
  campaignId  Int?
  campaign    Campaign?  @relation(fields: [campaignId], references: [id])
  satellite   Satellite? @relation(fields: [satelliteId], references: [id])
}

model Point {
  id         Int  @id @default(autoincrement())
  latitude   String?
  longitude  String?
  info       String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  campaignId Int?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])
}

model Image {
  id          Int        @id @default(autoincrement())
  date        DateTime?
  url         String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  satelliteId Int?
  campaignId  Int?
  campaign    Campaign?  @relation(fields: [campaignId], references: [id])
  satellite   Satellite? @relation(fields: [satelliteId], references: [id])
}

model Campaign {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  country          String             @default("BR")
  numInspectors    Int
  typePeriod       TypePeriod         @default(YEARLY)
  status           TypeStatus         @default(INCOMPLETE)
  initialDate      DateTime?
  finalDate        DateTime?
  publish          Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  organizationId   Int?
  organization     Organization?      @relation(fields: [organizationId], references: [id])
  compositions     Composition[]
  images           Image[]
  points           Point[]
  UsersOnCampaigns UsersOnCampaigns[]
  classes          UseClass[]
}

model UsersOnCampaigns {
  userId             Int
  campaignId         Int
  typeUserInCampaign TypeUserInCampaign @default(INSPETOR)
  createdAt          DateTime           @default(now())
  campaign           Campaign           @relation(fields: [campaignId], references: [id])
  user               User               @relation(fields: [userId], references: [id])

  @@id([userId, campaignId])
}

model User {
  id               Int                @id @default(autoincrement())
  name             String
  email            String             @unique
  city             String?
  state            String?
  country          String?
  geeKey           Json?
  password         String?
  typeUser         TypeUser           @default(USER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  terms            Boolean            @default(false)
  picture          String?
  active           Boolean            @default(false)
  language         TypeLanguage       @default(en)
  theme            TypeTheme          @default(default)
  organizationId   Int?
  organization     Organization?      @relation(fields: [organizationId], references: [id])
  UsersOnCampaigns UsersOnCampaigns[]
}

enum TypeUser {
  USER
  ADMIN
  ROOT
}

enum TypePeriod {
  YEARLY
  MONTHLY
}

enum TypeUserInCampaign {
  INSPETOR
  SUPERVISOR
  ADMIN
}

enum TypeStatus {
  INCOMPLETE
  CACHING
  READY
}

enum TypeLanguage {
  pt
  en
}

enum TypeTheme {
  default
  cosmic
  corporate
  dark
}
